---
title: "Informative prior archetypes"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Informative prior archetypes}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.align = "center",
  fig.path = "archetypes_figures/"
)
library(brms.mmrm)
library(dplyr)
```

Informative prior archetypes allow users to conveniently set informative priors in `brms.mmrm` in a robust way, guarding against common pitfalls such as reference level issues, interpretation problems, and rank deficiency.

We begin with a simulated dataset.

```{r}
library(brms.mmrm)
set.seed(0L)
data <- brm_simulate_outline(
  n_group = 2,
  n_patient = 100,
  n_time = 4,
  rate_dropout = 0,
  rate_lapse = 0
) |>
  dplyr::mutate(response = rnorm(n = dplyr::n())) |>
  brm_data_change() |>
  brm_simulate_continuous(names = c("biomarker1", "biomarker2")) |>
  brm_simulate_categorical(
    names = c("status1", "status2"),
    levels = c("present", "absent")
  )
dplyr::select(
  data,
  group,
  time,
  patient,
  starts_with("biomarker"),
  starts_with("status")
)
```

Suppose we want to place informative priors on the successive differences between adjacent time points. This approach is appropriate and desirable in many situations because the structure naturally captures the prior correlations among adjacent visits of a clinical trial. To do this, we create an instance of the "successive cells" archetype.

```{r}
archetype <- brm_archetype_successive_cells(data)
```

The instance of the archetype is an ordinary tibble, but it adds new columns.

```{r}
archetype
```

Those new columns constitute a custom model matrix to describe the desired parameterization. We have effects of interest to express successive differences,

```{r}
attr(archetype, "brm_archetype_interest")
```

and we have nuisance variables. Some nuisance variables are continuous covariates, while others are levels of one-hot-encoded concomitant factors or interactions of those concomitant factors with baseline and/or subgroup. All nuisance variables are centered at their means so the reference level of the model is at the "center" of the data and not implicitly conditional on a subset of the data. In addition, some nuisance variables are automatically be dropped in order to ensure the model matrix is full-rank. This is critically important to preserve the interpretation of the columns of interest and make sure the informative priors behave as expected.

```{r}
attr(archetype, "brm_archetype_nuisance")
```

The factors of interest linearly map to marginal means. To see the mapping, call `summary()` on the archetype. The printed output helps build intuition on how the archetype is parameterized and what those parameters are doing.

```{r}
summary(archetype)
```

The above output reveals a natural way to label parameters of interest using the marginal means they map to. For example, the `x_group_1_time_2` parameter corresponds to `group_1` and `time_2`, and the `x_group_2_time_3` parameter corresponds to `group_2` and `time_3`. We use this labeling idea to build an informative prior on the successive difference parameters `x_group_1_time_2`, `x_group_1_time_3`, etc. First, we assign univariate priors to marginal labels in a labeling scheme.

```{r}
label <- brm_prior_label(
  code = "normal(1, 2.2)",
  group = "group_1",
  time = "time_2"
) |>
  brm_prior_label("normal(1, 3.3)", group = "group_1", time = "time_3") |>
  brm_prior_label("normal(1, 4.4)", group = "group_1", time = "time_4") |>
  brm_prior_label("normal(2, 2.2)", group = "group_2", time = "time_2") |>
  brm_prior_label("normal(2, 3.3)", group = "group_2", time = "time_3") |>
  brm_prior_label("normal(2, 4.4)", group = "group_2", time = "time_4")
label
```

`brm_prior_archetype()` knows how to translate the labeled priors to specific `brms` parameters on successive differences. 

```{r}
prior <- brm_prior_archetype(archetype, label)
prior
```

The other methods in `brms.mmrm` automatically understand how to work with informative prior archetypes. Notably, the formula uses custom interest and nuisance variables instead of the original variables in the data.

```{r}
formula <- brm_formula(archetype)
formula
```

The model can accept the archetype, formula, and prior.

```{r}
model <- brm_model(
  data = archetype,
  formula = formula,
  prior = prior,
  refresh = 0
)
brms::prior_summary(model)
```

Marginal mean estimation, post-processing, and visualization automatically understand the archetype without any user intervention.

```{r, archetype_compare_data}
draws <- brm_marginal_draws(
  data = archetype,
  formula = formula,
  model = model
)
summaries_model <- brm_marginal_summaries(draws)
summaries_data <- brm_marginal_data(data)
brm_plot_compare(model = summaries_model, data = summaries_data)
```
